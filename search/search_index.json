{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"","tags":["tag1","tag2"]},{"location":"#hello-we-are-team-302","title":"Hello, we are Team 302","text":"<p>Welcome to our exhibit's website. Here you'll be able to see what we have been working on and our progress so far. Below, you can can see who is apart of the team as well as find our personal websites showing our individual work. </p> <p>Our project is an interactive HMI system that acts as a sort of mini game. The controls for it consists of two pushbuttons that the user can use to play along side an OLED display that provides instructions about how the game works. The objective is to win a simple number matching game by using the buttons to increase or decrease a value. There are three LEDs are used to provide adittion feedback to the user and an actuator is used as a sort of progress bar that extends and hits the \"win\" button.</p>","tags":["tag1","tag2"]},{"location":"#the-team","title":"The Team","text":"Members Individual Website Jack Francis Motor Driver/Actuator Shane Duttenhefner OLED Display","tags":["tag1","tag2"]},{"location":"#content-on-this-website","title":"Content On this Website","text":"Page Link Team Organization link Ideation link Block Diagram link <ul> <li> <p>Date Started: 1/17/2025</p> </li> <li> <p>University: Arizona State University</p> </li> <li> <p>Class: EGR 314</p> </li> <li> <p>Professor: Dr. Kevin Nichols</p> </li> </ul>","tags":["tag1","tag2"]},{"location":"Block%20Diagram/","title":"Block Diagram, Communication Process, Messaging Structure","text":"","tags":["tag1","tag2"]},{"location":"Block%20Diagram/#block-diagram-v2","title":"Block Diagram V2","text":"<p>Due to team complications involving the loss of a member, the block diagram has been simplified to only 2 subsystems. The original block diagram had 3 subsystems, the third including a pressure sensor that was intended to send pressure values to Jack and Shane's subsystems. Version 1 of the block diagram can be found in the appendix tab. In this updated block diagram, Shane's subsystem will supply 12V power both of the subsystems through pin 1 of the daisy chain. Pin 2 of the daisy chain will be for the RX/TX signals. Shane's output TX signal to Jack's input RX signal and Jack's output TX signal to Shane's input RX signal. The game now starts with the OLED subsystem, where one of the two pushbuttons initialize the game. The screen will display the input pressure and the goal pressure. Input pressure is changed when the user pushes one of the two pushbuttons, one decreasing and one increasing. When the goal pressure is reached, the actuator will receive the data that it has been reached and will move and send the data that the actuator has been moved back to the OLED in order to change target pressure to a different value. When the game has been won, the green LED on Shane's subsystem will flash green and the game will restart.</p>","tags":["tag1","tag2"]},{"location":"Block%20Diagram/#communication-process-diagram-v2","title":"Communication Process Diagram V2","text":"<p>With the recent team changes, we\u2019ve updated our communication diagram to best represent how our board communicates to each other. The diagram now starts with the user interacting with push buttons on Shane\u2019s board and then sending a message to Jack to start the game. After that, our boards continue to send messages telling the other to either extend the actuator based on the user\u2019s inputs or update the goal on the display. Once the final push button is hit by the actuator, a final message will be sent from Jack to Shane telling the boards that the game is over and to display the win screen.</p>","tags":["tag1","tag2"]},{"location":"Block%20Diagram/#messaging-structure","title":"Messaging Structure","text":"","tags":["tag1","tag2"]},{"location":"Block%20Diagram/#prefix-and-suffix","title":"Prefix and Suffix","text":"Byte Function AZ Start YB Stop","tags":["tag1","tag2"]},{"location":"Block%20Diagram/#message-ids","title":"Message IDs","text":"Team Members Team IDs Jack Francis J Shane Duttenhefner S Broadcast X","tags":["tag1","tag2"]},{"location":"Block%20Diagram/#message-types","title":"Message Types","text":"Message Type Message ID (char) Jack Francis (J) Shane Duttenhefner (S) Start game 1 R (LED turns on when message arrives) S (pushbutton press triggers send of b'1') Extend actuator 2 R (actuator extends; verify motion) S (interface reaches goal \u2192 send b'1') Change target value 3 S (Delay after extension \u2192 send b'1') R (HMI displays new target value) Stop game 4 S (victory button press sends b'1') R (HMI shows victory screen and resets game)","tags":["tag1","tag2"]},{"location":"Block%20Diagram/#message-type-1","title":"Message Type 1","text":"<p>This message will be sent from Shane to Jack when a pushbutton is pressed as an indicator that game has started.</p> Byte(s) Variable Name Variable Type Min Value Max Value Example 1 messagetypeone char 1 1 1 2 startgame char 0 1 1","tags":["tag1","tag2"]},{"location":"Block%20Diagram/#message-type-2","title":"Message Type 2","text":"<p>This message will be sent from Shane to Jack when the interface's input number reaches the goal number in order to extend the actuator.</p> Byte(s) Variable Name Variable Type Min Value Max Value Example 1 messagetypetwo char 2 2 2 2 extendactuator char 0 1 1","tags":["tag1","tag2"]},{"location":"Block%20Diagram/#message-type-3","title":"Message Type 3","text":"<p>After the actuator is extended, this message will be be sent to Shane from Jack a few seconds after receiving message type 2 so he can change to a new goal number.</p> Byte(s) Variable Name Variable Type Min Value Max Value Example 1 messagetypethree char 3 3 3 2 changevalue char 0 1 1","tags":["tag1","tag2"]},{"location":"Block%20Diagram/#message-type-4","title":"Message Type 4","text":"<p>This message will be sent to Shane after Jack's actuator pushes the victory button which will display a victory screen and reset the game.</p> Byte(s) Variable Name Variable Type Min Value Max Value Example 1 messagetypefour char 4 4 4 2 stopgame char 0 1 1","tags":["tag1","tag2"]},{"location":"ConceptIdeation/","title":"Ideation and Concept Generation","text":""},{"location":"ConceptIdeation/#our-goal","title":"Our Goal","text":"<p>The goal of our exhibit is to provide an enjoyable and informative experience about a particular concept from the STEM field. Through this exhibit, users will be able to directly interact with the display to change or show an observable scientific phenomenon. To be both entertaining and memorable, this exhibit will be designed to be a simple game where the user will be able to see how they can manipulate the display to get closer to a specified goal.</p> <p>Our target audience for this exhibit will primarily be for students in the grades K-12. This exhibit will be tailored to students that are interested in any category of STEM related subjects. </p>"},{"location":"ConceptIdeation/#brainstorm-session","title":"Brainstorm Session","text":"<p>Our top two ideas detailed in this organization were the guitar tuner and decibel balance, which we turned into one exhibit. This exhibit was a game where a user sings a certain frequency for an amount of time before the frequency range changes and the actuator moves forward. If the actuator moves forward enough to push the button, the user wins the game.</p> <ul> <li>Pre Organization</li> </ul> <p></p> <ul> <li>Post Organization</li> </ul> <p></p> <p>We originally threw random ideas at the wall without considering too much if they were in the scope of this class or exemplifying a certain STEM principle, but as the process went on we were able to hone in on a some relevant ideas. As we approached a sufficient amount of sticky notes, we began grouping them by what would fit into a holistic design rather than just keeping them as singular ideas. From this came more thoughtful and fleshed out ideas. Although a lot of the ideas themselves were fun, we found it hard to find a whole concept within our sticky notes that would be interesting design wise as well as explicitly lay out a STEM principle. From this we decided to rank them both by design criteria as well as functionality as a science exhibit exemplifying a certain STEM principle.</p>"},{"location":"ConceptIdeation/#concept-sketch","title":"Concept Sketch","text":""},{"location":"ConceptIdeation/#rationale","title":"Rationale","text":"<p>The features highlighted in our design include concepts such as value recording and frequency, made easy to discern by the simple game mechanics showing how a device is able to recognize frequency. Users will try to replicate a frequency for a certain amount of time until the frequency range changes and an actuator moves forward. The actuator moves forward to a button that signals to the user that they have won the game. The game uses progressive difficulty levels as acceptable frequencies get narrower and narrower. Cues provided to make use of the device easier is a display showing what frequencies are acceptable and unacceptable to move forward. Controls will be the user's own voice as they aim to replicate the frequency they are designated by the display. The game will be comfortable and safe to play as the user will just be speaking at a mild volume into a microphone in order to play the game. The instructions needed for the exhibit will be explained in simple and concise bullet points. The exhibit is simple enough so that most of its use will be intuitive.</p>"},{"location":"ConceptIdeation/#presentation","title":"Presentation","text":""},{"location":"ConceptIdeation/#redesign","title":"Redesign","text":"<p>Within a few weeks of our initial design, one of our team members was unfortunately removed from the class, leaving us with only three members. Due to this, we decided to lessen the scope of our project while keeping in mind the same principles we used for the old design. Our new design is mostly similar, except instead of doing a pitch/frequency game, we are changing it to a pressure gauge game, showcasing Boyle's Law as our STEM concept. The user will operate the plunger of a plastic syringe connected to an enclosed chamber which surrounds the pressure sensor. The board holding this sensor will set a goal pressure that the user will seek to reach by use of the syringe. An attached LED display will notify the user when they have reached the goal, and the game will stop. This design should be operable by a vast majority of users, and the quick, simple design will demonstrate Boyle's law.</p>"},{"location":"ConceptIdeation/#redesign-concept-sketch","title":"Redesign Concept Sketch","text":""},{"location":"appendix/","title":"Appendix","text":"<p>Insert old stuff</p>"},{"location":"appendix/#block-diagram-v1","title":"Block Diagram V1","text":""},{"location":"appendix/#communication-process-diagram-v1","title":"Communication Process Diagram V1","text":""},{"location":"charts/","title":"Team Organization","text":"","tags":["tag1","tag2"]},{"location":"charts/#team-charter-statement","title":"Team Charter statement","text":"<p>To work as a team and design a set of individual circuit boards that can communicate with each other via UART to create a museum-like exhibit that a user can interact with.</p>","tags":["tag1","tag2"]},{"location":"charts/#product-mission-statement","title":"Product Mission Statement","text":"<p>To provide a simple and fun game for students in grades K-6 that demonstrates how hardware can be used to interact with digital systems.</p>","tags":["tag1","tag2"]},{"location":"charts/#communication","title":"Communication","text":"","tags":["tag1","tag2"]},{"location":"charts/#comunication-channels","title":"Comunication Channels","text":"Name First Choice Communication Second Choice Communication Third Choice Communication Jack Francis Text Google Meet Discord Shane Duttenhefner Text Discord Google Meet","tags":["tag1","tag2"]},{"location":"charts/#communication-procedure","title":"Communication Procedure","text":"<p>Our team will primarily communicate through text and will use either Discord or Google Meet for calling one another in order to start meetings or discuss complicated topics. For instructor correspondence, the team will all share equal responsibility so we can all be on the same page and aware of any new information.</p>","tags":["tag1","tag2"]},{"location":"charts/#meeting-schedule","title":"Meeting Schedule","text":"<p>Our group will meet up in person or in call to work on projects during the following times:</p> <ul> <li> <p>Tues/Thurs: 1:30pm-3:00pm</p> </li> <li> <p>Saturday: 2:00pm-5:00pm</p> </li> </ul>","tags":["tag1","tag2"]},{"location":"charts/#meeting-coordination","title":"Meeting Coordination","text":"<p>We will remind ourselves of meetings the day of by texting each other in advance. If we need to change or add meeting times by communicating with one another about ideal times and try to come to an agreed time. For now, our preferred format for meeting is virtual, but as we move to making our physical boards, we may prefer face to face. Another procedure we feel is necessary is that each member should make sure to inform the others about missing meetings as earlier as possible.</p>","tags":["tag1","tag2"]},{"location":"charts/#roles-and-responsibilities","title":"Roles and Responsibilities","text":"Roles Member Duties Meeting Leader Jack Francis Schedules team meetings, creates and distributes an agenda for each meeting, and runs each meeting Assignment Leader Shane Duttenhefner Coordinates the team's work on a given assignment to Canvas before the due date Project Monitor Luke Jeffs Tracks the team's progress relative to the project schedule (Gantt chart) and keeps team members apprised of deadlines and project status","tags":["tag1","tag2"]},{"location":"charts/#team-coordination-and-accountability","title":"Team Coordination and Accountability","text":"<p>We will ensure that assignments are submitted on time with approal from every member by staying in constent communication about where we are in the project and informing eachother of our individual contributions or edits. We will ask eachother about what we know and what we struggle with for each assignment and if a member lacks the knowledge or skill for an assignment, the ohers will do their best to help and if they cannot, we will seek external aid via proffessors, other classmates, or the internet. To make sure everyone understands and acts upon the design review feedback, we will each ake the time to read the provided feedback and talk to eachother about how we can all improve in any proble areas. When addressing missed contribution or recognizing underperformance, the team will solve this by talking to the underperforming member and see what the issue is and see if we can come to an understanding to improve eachother's teamwork.</p>","tags":["tag1","tag2"]},{"location":"charts/#conflict-recognition-and-resolution","title":"Conflict Recognition and Resolution","text":"<p>When discourse arises in our group, our first step is to communicate about what is causeing this to happen and try to resolve it by either coming up with a comprimise that everyone can agree on or change they way we organize ourselves to a way that benefits everyone. The problem should only be escaleted to the instructor when the problem member refuses to cooperate and is actively hindering the rest of the team from completing our work.</p>","tags":["tag1","tag2"]},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}