{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"","tags":["tag1","tag2"]},{"location":"#hello-we-are-team-302","title":"Hello, we are Team 302","text":"<p>Welcome to our exhibit's website. Here you'll be able to see what we have been working on and our progress so far. Below, you can can see who is apart of the team as well as find our personal websites showing our individual work. </p> <p>Our project is an interactive HMI system that acts as a mini game. The controls for it consists of two pushbuttons that the user can use to play along side an OLED display that provides instructions about how the game works. The objective is to win a simple number matching game by using the buttons to increase or decrease a value. There are three LEDs that are used to provide additional feedback to the user and an actuator is used as a sort of progress bar that extends and hits the \"win\" button.</p>","tags":["tag1","tag2"]},{"location":"#image-of-system","title":"Image of System","text":"","tags":["tag1","tag2"]},{"location":"#the-team","title":"The Team","text":"Members Individual Website Jack Francis Motor Driver/Actuator Shane Duttenhefner OLED Display","tags":["tag1","tag2"]},{"location":"#content-on-this-website","title":"Content On this Website","text":"Page Link Team Organization link Ideation link Block Diagram link Poster link Resources link Reflection link Appendix link <ul> <li> <p>Date Started: 1/17/2025</p> </li> <li> <p>University: Arizona State University</p> </li> <li> <p>Class: EGR 314</p> </li> <li> <p>Professor: Dr. Kevin Nichols</p> </li> </ul>","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/","title":"Team Organization","text":"","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/#team-charter-statement","title":"Team Charter statement","text":"<p>Our objective is to work as a team and design a set of individual circuit boards that can communicate with each other via UART to create a museum-like exhibit that a user can interact with.</p>","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/#product-mission-statement","title":"Product Mission Statement","text":"<p>Our goal is to provide a simple and fun game for students in grades K-6 that demonstrates how hardware can be used to interact with digital systems.</p>","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/#communication","title":"Communication","text":"","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/#comunication-channels","title":"Comunication Channels","text":"Name First Choice Communication Second Choice Communication Third Choice Communication Jack Francis Text Google Meet Discord Shane Duttenhefner Text Discord Google Meet","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/#communication-procedure","title":"Communication Procedure","text":"<p>Our team will primarily communicate through text and will use either Discord or Google Meet for calling one another in order to start meetings or discuss complicated topics. For instructor correspondence, the team will all share equal responsibility so we can all be on the same page and aware of any new information.</p>","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/#meeting-schedule","title":"Meeting Schedule","text":"<p>Our group will meet up in person or in call to work on projects during the following times:</p> <ul> <li> <p>Tues/Thurs: 1:30pm-3:00pm</p> </li> <li> <p>Saturday: 2:00pm-5:00pm</p> </li> </ul>","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/#meeting-coordination","title":"Meeting Coordination","text":"<p>We will remind ourselves of meetings the day of by texting each other in advance. If we need to change or add meeting times by communicating with one another about ideal times and try to come to an agreed time. For now, our preferred format for meeting is virtual, but as we move to making our physical boards, we will meet face to face. Another procedure we feel is necessary is that each member should make sure to inform the others about missing meetings as earlier as possible.</p>","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/#roles-and-responsibilities","title":"Roles and Responsibilities","text":"Roles Member Duties Meeting Leader Jack Francis Schedules team meetings, creates and distributes an agenda for each meeting, and runs each meeting Assignment Leader Shane Duttenhefner Coordinates the team's work on a given assignment to Canvas before the due date Project Monitor Luke Jeffs Tracks the team's progress relative to the project schedule (Gantt chart) and keeps team members apprised of deadlines and project status","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/#team-coordination-and-accountability","title":"Team Coordination and Accountability","text":"<p>We will ensure that assignments are submitted on time with approval from every member by staying in constant communication about where we are in the project and informing each other of our individual contributions or edits. We will ask each other about what we know and what we struggle with for each assignment and if a member lacks the knowledge or skill for an assignment, the others will do their best to help and if they cannot, we will seek external aid via professors, other classmates, or the internet. To make sure everyone understands and acts upon the design review feedback, we will each take the time to read the provided feedback and talk to each other about how we can all improve in any possible areas. When addressing missed contribution or recognizing underperformance, the team will solve this by talking to the underperforming member and see what the issue is and see if we can come to an understanding to improve each other's teamwork.</p>","tags":["tag1","tag2"]},{"location":"pg2_TeamOrganization/#conflict-recognition-and-resolution","title":"Conflict Recognition and Resolution","text":"<p>When conflict arises in our group, our first step is to communicate about what is causing this to happen and try to resolve it by either coming up with a compromise that everyone can agree on or change the way we organize ourselves in a way that benefits everyone. The problem should only be escalated to the instructor when the member causing problems refuses to cooperate and is actively hindering the rest of the team from completing our work.</p>","tags":["tag1","tag2"]},{"location":"pg3_ConceptIdeation/","title":"Ideation and Concept Generation","text":""},{"location":"pg3_ConceptIdeation/#our-goal","title":"Our Goal","text":"<p>The goal of our exhibit is to provide an enjoyable and informative experience about a particular concept from the STEM field. Through this exhibit, users will be able to directly interact with the display to change or show an observable scientific phenomenon. To be both entertaining and memorable, this exhibit will be designed to be a simple game where the user will be able to see how they can manipulate the display to get closer to a specified goal.</p> <p>Our target audience for this exhibit will primarily be for students in the grades K-6. This exhibit will be tailored to students that are interested in any category of STEM related subjects. </p>"},{"location":"pg3_ConceptIdeation/#brainstorm-session","title":"Brainstorm Session","text":"<p>Our top two ideas detailed in this organization were the guitar tuner and decibel balance, which we turned into one exhibit. This exhibit was a game where a user sings a certain frequency for an amount of time before the frequency range changes and the actuator moves forward. If the actuator moves forward enough to push the button, the user wins the game.</p> <ul> <li>Pre Organization</li> </ul> <p></p> <ul> <li>Post Organization</li> </ul> <p></p> <p>We originally threw random ideas at the wall without considering too much if they were in the scope of this class or exemplifying a certain STEM principle, but as the process went on we were able to hone in on a some relevant ideas. As we approached a sufficient amount of sticky notes, we began grouping them by what would fit into a holistic design rather than just keeping them as singular ideas. From this came more thoughtful and fleshed out ideas. Although a lot of the ideas themselves were fun, we found it hard to find a whole concept within our sticky notes that would be interesting design wise as well as explicitly lay out a STEM principle. From this we decided to rank them both by design criteria as well as functionality as a science exhibit exemplifying a certain STEM principle.</p>"},{"location":"pg3_ConceptIdeation/#concept-sketch-v3","title":"Concept Sketch V3","text":""},{"location":"pg3_ConceptIdeation/#rationale","title":"Rationale","text":"<p>The features highlighted in our design include concepts such as value recording, simple controls, and visual feedback. Users will try to match a random value for a certain amount of time until the value range changes and an actuator moves forward. The actuator moves forward to a button that signals to the user that they have won the game. Features that are provided to make using device easier is a display showing what number the user must try to match their value to in order to move forward as well as LEDs that act as additional progress indicators for the user. Controls will be two pushbuttons so that they can increase and decrease their stored number as well as start and reset the game. The game will be comfortable and safe to play as the user will be interacting with very simple controls and not be interacting with any potentially dangerous circuitry. The instructions needed for the exhibit will be explained on the digital display. The exhibit is simple enough so that most of its use will be intuitive. The design has changed a couple of times over the course of development due to team and assembly issues. While not able to stick with the previous concepts for the exhibit, the general basis for functionality and the overall design for it to be a \"minigame\" remained fairly consistent. Previous versions of these concepts for the project can be found in the appendix.</p> <p>Appendix</p>"},{"location":"pg4_BlockDiagram/","title":"Block Diagram, Communication Process, Messaging Structure","text":"","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#block-diagram-v2","title":"Block Diagram V2","text":"<p>Due to team complications involving the loss of a member, the block diagram has been simplified to only 2 subsystems. The original block diagram had 3 subsystems, the third including a pressure sensor that was intended to send pressure values to Jack and Shane's subsystems. Version 1 of the block diagram can be found in the appendix tab. In this updated block diagram, Shane's subsystem will supply 12V power both of the subsystems through pin 1 of the daisy chain. Pin 2 of the daisy chain will be for the RX/TX signals. Shane's output TX signal to Jack's input RX signal and Jack's output TX signal to Shane's input RX signal. The game now starts with the OLED subsystem, where one of the two pushbuttons initialize the game. The screen will display the input pressure and the goal pressure. Input pressure is changed when the user pushes one of the two pushbuttons, one decreasing and one increasing. When the goal pressure is reached, the actuator will receive the data that it has been reached and will move and send the data that the actuator has been moved back to the OLED in order to change target pressure to a different value. When the game has been won, the green LED on Shane's subsystem will flash green and the game will restart.</p>","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#decision-making","title":"Decision Making","text":"<p>The block diagram came together originally by putting together the block diagrams constructed on our individual datasheets, but with some of the extra details reserved just for the individual block diagrams in order to be less cluttered. The block diagram features the necessary functionalities (OLED, HMI, and Actuator) for the system to work and the 8 pin ribbon cable where power and commands are shared.</p>","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#communication-process-diagram-v2","title":"Communication Process Diagram V2","text":"","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#functionality","title":"Functionality","text":"<p>With the recent team changes, we\u2019ve updated our communication diagram to best represent how our board communicates to each other. The user will pick up the game controller that has the OLED display and pushbuttons. Pushing either of the pushbuttons while the OLED is on the start screen will start the game, which will initialize the timer on the actuator, and the OLED will display a randomized target value to the user, along with the current value the user is inputting. When the user pushes the buttons, the input value will go up or down. When the input value hasn't reached the goal value, Shane's subsystem will tell Jack's subsystem to not engage the actuator. When the input value reaches the goal value, Shane's subsystem will send a message to Jack to extend the actuator. After a second of actuator extension, it will stop and a message will be sent to Shane to change the target value, which will display as a new number on Shane's screen. When the actuator has extended far enough, it'll hit a pushbutton on Jack's subsystem, communicating to Shane to display a victory screen and the entire game will reset to the start screen.</p>","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#messaging-structure","title":"Messaging Structure","text":"","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#prefix-and-suffix","title":"Prefix and Suffix","text":"Byte Function AZ Start YB Stop","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#message-ids","title":"Message IDs","text":"Team Members Team IDs Jack Francis J Shane Duttenhefner S Broadcast X","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#message-types","title":"Message Types","text":"Message Type Message ID (char) Jack Francis (J) Shane Duttenhefner (S) Start game 1 R (LED turns on when message arrives) S (pushbutton press triggers send of b'1') Extend actuator 2 R (actuator extends; verify motion) S (interface reaches goal \u2192 send b'1') Change target value 3 S (Delay after extension \u2192 send b'1') R (HMI displays new target value) Stop game 4 S (victory button press sends b'1') R (HMI shows victory screen and resets game)","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#message-type-1","title":"Message Type 1","text":"<p>This message will be sent from Shane to Jack when a pushbutton is pressed as an indicator that game has started.</p> Byte(s) Variable Name Variable Type Min Value Max Value Example 1 messagetypeone char 1 1 1 2 startgame char 0 1 1","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#message-type-2","title":"Message Type 2","text":"<p>This message will be sent from Shane to Jack when the interface's input number reaches the goal number in order to extend the actuator.</p> Byte(s) Variable Name Variable Type Min Value Max Value Example 1 messagetypetwo char 2 2 2 2 extendactuator char 0 1 1","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#message-type-3","title":"Message Type 3","text":"<p>After the actuator is extended, this message will be be sent to Shane from Jack a few seconds after receiving message type 2 so he can change to a new goal number.</p> Byte(s) Variable Name Variable Type Min Value Max Value Example 1 messagetypethree char 3 3 3 2 changevalue char 0 1 1","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#message-type-4","title":"Message Type 4","text":"<p>This message will be sent to Shane after Jack's actuator pushes the victory button which will display a victory screen and reset the game.</p> Byte(s) Variable Name Variable Type Min Value Max Value Example 1 messagetypefour char 4 4 4 2 stopgame char 0 1 1 <p>For designing the message structure, we decided to keep the messages simple as to not create unknown communication errors. Most of the communication was turned into 0s and 1s and the more complex math was kept self contained within each subsystem, with the 1s and 0s triggering the process that causes the complex math within a system (for example, instead of the actuator sending a specific pressure value, it will send a 1 to the OLED, which will generate a random number to be the next value). The communication difficulties with previous iterations using more complex variables caused us to move simplify it for more effective communication.</p>","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#top-5-biggest-software-changes","title":"Top 5 Biggest Software Changes","text":"","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#1-payload-values","title":"1. Payload Values","text":"<p>Originally, we were going to send over a float that would represent the pressure values being sent over. This became strange, floats were hard to send over serial, even with the struct function. Because of this, we switched over to sending multiple characters but using 0s to pad out the bytes. As our team changed, so did our design and software and it was changed to simple 1 byte 0s and 1s.</p>","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#2-message-types","title":"2. Message Types","text":"<p>There were originally an abundance of message types that would've been sent across the system, many of which did not make it into the final design. There were error messages, status messages, pressure messages, actuator state messages, and so on. As we learned more about board communication, we saw that many of these messages weren't necessary for system functionality. It was then turned into 4 messages to remove the clutter from the message cache to only send data relevant for each system.</p>","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#3-communication-flow","title":"3. Communication Flow","text":"<p>Our original communication diagram was a lot more complicated given the various types of messages we were sending between our three boards, but as we reduced to two boards and fewer messages, we had to revise our process diagram to a much simpler one. The first iteration had a lot of messages being sent between each board for things like turning on certain systems such as lights and the Display. During revision, however, we found that we could reduce the number of messages as most of those processes could be self contained within our seperate programs.</p>","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#4-spi-to-i2c","title":"4. SPI to I2C","text":"<p>For the OLED, we had to use SPI in for communication between it and the microcontroller but SPI was rather difficult to work with in this context which became exceptionally more difficult with the use of the PIC microcontroller for the OLED subsystem. Beining unable to get the SPI OLED to turn on, we decided t0 switch over to a different OLED that utilizes I2C communication. The switch over to I2C was fairly easy and kept a reletively similar set up to the original SPI code. In addition, the rginal OLED had a lot more pins involved with programming it, while the new one only had two, so programming the pins in MPLab was a lot easier.</p>","tags":["tag1","tag2"]},{"location":"pg4_BlockDiagram/#5-getting-rid-of-pressure-sensor","title":"5. Getting Rid of Pressure Sensor","text":"<p>We unfortunately had to the the pressure sensor subsystem that we needed for our previous design. Without the sensor, we no longer need to program our boards to take in ATD inputs. To keep the style of our current game similar to the previous, we still kept the general code structure of our game the same as before, but instead we used simple digital imputs from pushbuttons to control the flow of the game instead of the input readings from the pressure sensor.</p>","tags":["tag1","tag2"]},{"location":"pg5_Poster/","title":"Showcase Poster","text":"<p>Team_302_Poster.pdf</p>"},{"location":"pg6_Resources/","title":"Resources","text":""},{"location":"pg6_Resources/#image-of-team-system","title":"Image of Team System","text":""},{"location":"pg6_Resources/#video-of-team-system","title":"Video of Team System","text":""},{"location":"pg7_Reflection/","title":"Lessons Learned","text":""},{"location":"pg7_Reflection/#1-start-early","title":"1. Start Early","text":"<p>Our team was a bit too nonchalant with the timing when it came to the group project, with our PCB boards coming in close to the final deadline, giving short notice for debugging whatever issues our current boards had and no time for reprints. This caused the team to miss deadlines and let more mistakes get through than ideal. We also bumped into team contribution and communication issues later than we should have because lack of dedication early on, leading us to make sharp and harsh decisions on who would remain in the team. Overall, the project would've been smoother if we had a dedicated plan of action early on.</p>"},{"location":"pg7_Reflection/#2-read-the-datasheet","title":"2. Read the Datasheet","text":"<p>Datasheets seem long and confusing to beginners working on their first projects, but they are an integral part to understanding how to choose parts and design a circuit. Without proper knowledge of component specifications, at best you could have a dead-bug board, and at worst have to re-select components and reprint your board entirely. If confronting confusing technical language, either try to understand it through third party sources, or select a component with a more familiar structure and easier to read datasheet.</p>"},{"location":"pg7_Reflection/#3-use-many-jumpersheaders","title":"3. Use Many Jumpers/Headers","text":"<p>Electricity can be a scary thing, and unexpected problems may arise with your original board design. If you want to stray away from deadbugging or reprinting your board, jumpers and headers can be a decent way to provide an alternative design if your current design is failing. With jumpers and headers, you can use them as testpoints, or to reroute signal and power lines, or to plug in components from the outside (useful for in-circuit programming and modular expansion)</p>"},{"location":"pg7_Reflection/#4-check-part-sizes","title":"4. Check Part Sizes","text":"<p>Some team members were ignorant of part sizes, and were ordering parts way too small to reasonably solder by hand. Luckily, the professor warned them and they were quick to change their mistake by changing the footprint on the board and the component size. For capacitors/resistors/diodes and the like, it is recommended to go at least 0805 package size for hand soldering.</p>"},{"location":"pg7_Reflection/#5-budget-yourself","title":"5. Budget Yourself","text":"<p>Our class has a budget limit, and depending on your circuit, it can be quite strict. When purchasing parts, try to fit as much within the budget constraints as can be in case you lose or break parts or your components don't fit your design as intended. Don't work to be ambitious when you're only given a few resources, focus on what works and streamline that to deliver a working product.</p>"},{"location":"pg7_Reflection/#6-always-communicate","title":"6. Always Communicate","text":"<p>Our team originally had 4 members, but because of lacking communication and dedication it dropped to 2 in the end. It was particularly hard because our team had to go through multiple design iterations each time a member left, with our system becoming more and more basic. If communication was a bigger priority, then perhaps members would have been more inspired to contribute, and if they still would not contribute, they could have been removed at a less crucial time so the team and the removed member would have time to revise projects.</p>"},{"location":"pg7_Reflection/#7-check-off-early","title":"7. Check-off Early","text":"<p>ICCs (In Class Check-offs) while not the main attraction of this course, do contribute a lot of points and gave us a lot of necessary information to create a working system. If neglected, you could likely be missing much of the information taught in class and would have to look to third party resources to learn how to complete the team project, and if your team project is lacking, ICCs could save your grade at the end of the semester, so it is always a good idea to try to get checked off early so you are not caught up during the crunch time of checking off during the due date.</p>"},{"location":"pg7_Reflection/#8-talk-to-professorstas","title":"8. Talk to Professors/TAs","text":"<p>There is a lot of new information you are going to be learning in this class, and a good amount of it won't be explicitly detailed within the lectures, which will mean you have will have to look for information outside of just lectures. This is why talking to Professors and TAs about your concerns and questions are a good decision. They can provide you information needed to solve any of the problems unique to you that could have been looked over within lecture.</p>"},{"location":"pg7_Reflection/#9-heavy-documentation","title":"9. Heavy Documentation","text":"<p>Engineering is just as much practical application as it is documentation. If a design fails, debug it as well as you can and track what errors arose to cause the failure and why. Even though your project has problems, awareness of the problems and working towards practical solutions shows deep understanding of the work in spite of failure.</p>"},{"location":"pg7_Reflection/#10-organize-board-layout","title":"10. Organize Board Layout","text":"<p>When designing a PCB board, it really helps to neatly organize where all your components are located on the board. This not only helps when drawing taces to limit the risk of crossing paths and the number of vias needed, but also for the actual placement of the hardware. Sometimes you may set up you footprints in a way that looks good but when you actually get the board, your OLED faces the wrong direction from the orientation you wanted, or the motor hangs off the incorrect side. In addition, you have to account for the actual size of components because some may have wider frams than drawn in the foot print, making it harder to solder on other components if that you already soldered the first in.</p>"},{"location":"pg7_Reflection/#recommmendations-for-future-students","title":"Recommmendations for Future Students","text":""},{"location":"pg7_Reflection/#1-establish-a-lasting-team-communication-early-on-to-keep-away-from-later-conflicts-that-could-interfere-with-crucial-work","title":"1. Establish a lasting team communication early on to keep away from later conflicts that could interfere with crucial work.","text":""},{"location":"pg7_Reflection/#2-consult-as-many-resources-as-you-can-if-you-cannot-solve-an-issue-if-the-in-class-pdfs-dont-help-try-to-search-outside-sources-if-outside-sources-dont-help-go-to-a-ta-or-professor-in-order-to-work-hands-on","title":"2. Consult as many resources as you can if you cannot solve an issue. If the in class PDFs don't help, try to search outside sources. If outside sources don't help, go to a TA or Professor in order to work hands-on.","text":""},{"location":"pg7_Reflection/#3-work-just-as-much-on-your-project-early-in-the-semester-as-you-would-later-in-the-semester-as-it-would-save-you-from-later-stress-and-possible-mistakes","title":"3. Work just as much on your project early in the semester as you would later in the semester, as it would save you from later stress and possible mistakes.","text":""},{"location":"pg7_Reflection/#4-do-in-class-checkoffslabs-so-if-your-team-project-suffers-you-can-have-your-grade-fall-back-on-successfully-completing-the-work-not-directly-related-to-the-final-project","title":"4. Do in-class checkoffs/labs so if your team project suffers you can have your grade fall back on successfully completing the work not directly related to the final project.","text":""},{"location":"pg7_Reflection/#5-if-your-team-project-ends-up-failing-be-thorough-in-documenting-and-reporting-it-to-the-professors-and-well-as-within-your-github-site","title":"5. If your team project ends up failing, be thorough in documenting and reporting it to the professors and well as within your github site.","text":""},{"location":"pg7_Reflection/#version-20","title":"Version 2.0","text":"<p>In a version 2.0, one thing we could improve would be the ability to send variable types other than ones and zeros as characters. This would be an improvment because it opens up a whole new range of data that we can use to develop a more intricate system that can use things like the input data of a sensor. Curently our communication diagram only has us telling each other to turn systems on or off which works with our current design, but if we wanted to have the speed of the actuator change based on a range of float inputs, we could do that with our current architechture. To add this, all we would need is to modify our send and recieve functions to be able to format the message string in a way that we can still read the payload as its intended variabe type. Dividing up the code would be fairly simple as we would need to adjust the same functions within our own code. In addition, if add some a new device for inputs, we could add the code that handles the input data from it to the HMI system to be sent over to the actuator. To improve debuggability, we found that using LEDs as \"Checkpoints\" in code is a great way to tell where the code is at while its running as well as telling where it freezes or gets stuck. We can use this to debug our messaging structure by having an LED blink on certain actions such as: receiving a message, sending a message, or running a function based on a payload. This will help us isolate what parts of the code have issue so that we can adjust them as we test. Currently, we don't feel that there are any necessary peripherals needed to improve our current system except for some sort of sensor or microphone if we wanted to return to something similar to our previous designs. For our protocal design, we would modify it to account for a different range of values for inputs and adjust how our actuator moves and what information our OLED will display.</p>"},{"location":"pg8_Appendix/","title":"Appendix","text":""},{"location":"pg8_Appendix/#concept-sketch-v1","title":"Concept Sketch V1","text":""},{"location":"pg8_Appendix/#presentation-of-concept-sketch-v1","title":"Presentation of Concept Sketch V1","text":""},{"location":"pg8_Appendix/#concept-sketch-v2","title":"Concept Sketch V2","text":""},{"location":"pg8_Appendix/#block-diagram-v1","title":"Block Diagram V1","text":""},{"location":"pg8_Appendix/#communication-process-diagram-v1","title":"Communication Process Diagram V1","text":""},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}